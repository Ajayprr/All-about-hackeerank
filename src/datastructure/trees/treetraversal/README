You are given a pointer to the root of a binary tree;
1. print the values in preorder traversal. You only have to complete the function.

Input Format
You are given a function,

void Preorder(node *root) {

}
Output Format
Print the values on a single line separated by space.

Sample Input

     3
   /   \
  5     2
 / \    /
1   4  6
Sample Output

3 5 1 4 2 6


2. print the values in post-order traversal. You only have to complete the function.

Input Format
You are given a function,

void Postorder(node *root) {

}
Output Format
Print the values on a single line separated by space.

Sample Input

    3
  /   \
 5     2
/ \    /
1   4  6
Sample Output

1 4 5 6 2 3

3. Print the values in in-order traversal. You only have to complete the function.

Input Format
You are given a function,

void Inorder(node *root) {

}
Output Format
Print the values on a single line separated by space.

Sample Input

    3
  /   \
 5     2
/ \    /
1   4  6
Sample Output

1 5 4 3 6 2

4. Print the top view of the binary tree. You only have to complete the function.
For example :

    3
  /   \
 5     2
/ \   / \
1   4 6   7
\       /
 9     8
Top View : 1 -> 5 -> 3 -> 2 -> 7
Input Format

You are given a function,

void top_view(node * root)
{

}
Output Format

Print the values on a single line separated by space.

Sample Input

    3
  /   \
 5     2
/ \   / \
1   4 6   7
\       /
 9     8
Sample Output

1 5 3 2 7
Explanation

    3
  /   \
 5     2
/ \   / \
1   4 6   7
\       /
 9     8
From the top only nodes 1,5,3,2 and 7 will be visible.

5.  Print the level order traversal of this tree. In level order traversal, we visit the nodes level by level from left to right. 
You only have to complete the function. 
For example:

         3
       /   \
      5     2
     / \    /
    1   4  6
For the above tree, the level order traversal is 3 -> 5 -> 2 -> 1 -> 4 -> 6.

Input Format

You are given a function,

void level_order(node * root)
{

}
Output Format

Print the values in a single line seperated by a space.

Sample Input

         3
       /   \
      5     2
     / \    /
    1   4  6
Sample Output

3 5 2 1 4 6
Explanation

Level 1:        3
              /   \
Level 2:     5     2
            / \    /
Level 3:   1   4  6
We need to print the nodes level by level. We process each level from left to right. 
Level Order Traversal: 3 -> 5 -> 2 -> 1 -> 4 -> 6
